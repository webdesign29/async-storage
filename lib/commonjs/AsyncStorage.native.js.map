{"version":3,"names":["RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","checkValidInput","multiGet","errors","result","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","errorList","i","request","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","checkValidArgs"],"sources":["AsyncStorage.native.ts"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport {\r\n  checkValidArgs,\r\n  checkValidInput,\r\n  convertError,\r\n  convertErrors,\r\n} from './helpers';\r\nimport RCTAsyncStorage from './RCTAsyncStorage';\r\nimport type {\r\n  AsyncStorageStatic,\r\n  ErrorLike,\r\n  KeyValuePair,\r\n  MultiRequest,\r\n} from './types';\r\n\r\nif (!RCTAsyncStorage) {\r\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\r\n\r\nTo fix this issue try these steps:\r\n\r\n  • Rebuild and restart the app.\r\n\r\n  • Run the packager with \\`--reset-cache\\` flag.\r\n\r\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app.\r\n\r\n  • If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\r\n\r\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-async-storage/async-storage/issues\r\n`);\r\n}\r\n\r\n/**\r\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\r\n * storage system that is global to the app. It should be used instead of\r\n * LocalStorage.\r\n *\r\n * See https://react-native-async-storage.github.io/async-storage/docs/api\r\n */\r\nconst AsyncStorage = ((): AsyncStorageStatic => {\r\n  let _getRequests: MultiRequest[] = [];\r\n  let _getKeys: string[] = [];\r\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\r\n\r\n  return {\r\n    /**\r\n     * Fetches an item for a `key` and invokes a callback upon completion.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\r\n     */\r\n    getItem: (key, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        checkValidInput(key);\r\n        RCTAsyncStorage.multiGet(\r\n          [key],\r\n          (errors?: ErrorLike[], result?: string[][]) => {\r\n            // Unpack result to get value from [[key,value]]\r\n            const value = result?.[0]?.[1] ? result[0][1] : null;\r\n            const errs = convertErrors(errors);\r\n            callback?.(errs?.[0], value);\r\n            if (errs) {\r\n              reject(errs[0]);\r\n            } else {\r\n              resolve(value);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Sets the value for a `key` and invokes a callback upon completion.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\r\n     */\r\n    setItem: (key, value, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        checkValidInput(key, value);\r\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\r\n          const errs = convertErrors(errors);\r\n          callback?.(errs?.[0]);\r\n          if (errs) {\r\n            reject(errs[0]);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Removes an item for a `key` and invokes a callback upon completion.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\r\n     */\r\n    removeItem: (key, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        checkValidInput(key);\r\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\r\n          const errs = convertErrors(errors);\r\n          callback?.(errs?.[0]);\r\n          if (errs) {\r\n            reject(errs[0]);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Merges an existing `key` value with an input value, assuming both values\r\n     * are stringified JSON.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\r\n     */\r\n    mergeItem: (key, value, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        checkValidInput(key, value);\r\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\r\n          const errs = convertErrors(errors);\r\n          callback?.(errs?.[0]);\r\n          if (errs) {\r\n            reject(errs[0]);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\r\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\r\n     * your app's keys.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\r\n     */\r\n    clear: (callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\r\n          const err = convertError(error);\r\n          callback?.(err);\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\r\n     */\r\n    getAllKeys: (callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\r\n          const err = convertError(error);\r\n          callback?.(err, keys);\r\n          if (keys) {\r\n            resolve(keys);\r\n          } else {\r\n            reject(err);\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * The following batched functions are useful for executing a lot of\r\n     * operations at once, allowing for native optimizations and provide the\r\n     * convenience of a single callback after all operations are complete.\r\n     *\r\n     * These functions return arrays of errors, potentially one for every key.\r\n     * For key-specific errors, the Error object will have a key property to\r\n     * indicate which key caused the error.\r\n     */\r\n\r\n    /**\r\n     * Flushes any pending requests using a single batch call to get the data.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\r\n     * */\r\n    flushGetRequests: () => {\r\n      const getRequests = _getRequests;\r\n      const getKeys = _getKeys;\r\n\r\n      _getRequests = [];\r\n      _getKeys = [];\r\n\r\n      RCTAsyncStorage.multiGet(\r\n        getKeys,\r\n        (errors?: ErrorLike[], result?: string[][]) => {\r\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\r\n          // it's much, much faster in practice for the data sets we deal with (we avoid\r\n          // allocating result pair arrays). This was heavily benchmarked.\r\n          //\r\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\r\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\r\n          const map: Record<string, string> = {};\r\n          result?.forEach(([key, value]) => {\r\n            map[key] = value;\r\n            return value;\r\n          });\r\n          const reqLength = getRequests.length;\r\n\r\n          /**\r\n           * As mentioned few lines above, this method could be called with the array of potential error,\r\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\r\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\r\n           * would simply return `undefined` as their result, rendering false negatives.\r\n           *\r\n           * In order to avoid this situation, in case of any call failing,\r\n           * the rest of them will be rejected as well (with the same error).\r\n           */\r\n          const errorList = convertErrors(errors);\r\n          const error = errorList?.length ? errorList[0] : null;\r\n\r\n          for (let i = 0; i < reqLength; i++) {\r\n            const request = getRequests[i];\r\n            if (error) {\r\n              request.callback?.(errorList);\r\n              request.reject?.(error);\r\n              continue;\r\n            }\r\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\r\n              key,\r\n              map[key],\r\n            ]);\r\n            request.callback?.(null, requestResult);\r\n            request.resolve?.(requestResult);\r\n          }\r\n        }\r\n      );\r\n    },\r\n\r\n    /**\r\n     * This allows you to batch the fetching of items given an array of `key`\r\n     * inputs. Your callback will be invoked with an array of corresponding\r\n     * key-value pairs found.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\r\n     */\r\n    multiGet: (keys, callback) => {\r\n      if (!_immediate) {\r\n        _immediate = setImmediate(() => {\r\n          _immediate = null;\r\n          AsyncStorage.flushGetRequests();\r\n        });\r\n      }\r\n\r\n      const getRequest: MultiRequest = {\r\n        keys: keys,\r\n        callback: callback,\r\n        // do we need this?\r\n        keyIndex: _getKeys.length,\r\n        resolve: null as any,\r\n        reject: null as any,\r\n      };\r\n\r\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\r\n        (resolve, reject) => {\r\n          getRequest.resolve = resolve;\r\n          getRequest.reject = reject;\r\n        }\r\n      );\r\n\r\n      _getRequests.push(getRequest);\r\n      // avoid fetching duplicates\r\n      keys.forEach((key) => {\r\n        if (_getKeys.indexOf(key) === -1) {\r\n          _getKeys.push(key);\r\n        }\r\n      });\r\n\r\n      return promiseResult;\r\n    },\r\n\r\n    /**\r\n     * Use this as a batch operation for storing multiple key-value pairs. When\r\n     * the operation completes you'll get a single callback with any errors.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\r\n     */\r\n    multiSet: (keyValuePairs, callback) => {\r\n      checkValidArgs(keyValuePairs, callback);\r\n      return new Promise((resolve, reject) => {\r\n        keyValuePairs.forEach(([key, value]) => {\r\n          checkValidInput(key, value);\r\n        });\r\n\r\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\r\n          const error = convertErrors(errors);\r\n          callback?.(error);\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Call this to batch the deletion of all keys in the `keys` array.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\r\n     */\r\n    multiRemove: (keys, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        keys.forEach((key) => checkValidInput(key));\r\n\r\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\r\n          const error = convertErrors(errors);\r\n          callback?.(error);\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Batch operation to merge in existing and new values for a given set of\r\n     * keys. This assumes that the values are stringified JSON.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\r\n     */\r\n    multiMerge: (keyValuePairs, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\r\n          const error = convertErrors(errors);\r\n          callback?.(error);\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n  };\r\n})();\r\n\r\nexport default AsyncStorage;\r\n"],"mappings":"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"}