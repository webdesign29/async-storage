{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["export type ErrorLike = {\r\n  message: string;\r\n  key: string;\r\n};\r\n\r\nexport type Callback = (error?: Error | null) => void;\r\n\r\nexport type CallbackWithResult<T> = (\r\n  error?: Error | null,\r\n  result?: T | null\r\n) => void;\r\n\r\nexport type KeyValuePair = [string, string | null];\r\n\r\nexport type MultiCallback = (errors?: readonly (Error | null)[] | null) => void;\r\n\r\nexport type MultiGetCallback = (\r\n  errors?: readonly (Error | null)[] | null,\r\n  result?: readonly KeyValuePair[]\r\n) => void;\r\n\r\nexport type MultiRequest = {\r\n  keys: readonly string[];\r\n  callback?: MultiGetCallback;\r\n  keyIndex: number;\r\n  resolve?: (result: readonly KeyValuePair[]) => void;\r\n  reject?: (error?: any) => void;\r\n};\r\n\r\nexport type AsyncStorageHook = {\r\n  getItem: (callback?: CallbackWithResult<string>) => Promise<string | null>;\r\n  setItem: (value: string, callback?: Callback) => Promise<void>;\r\n  mergeItem: (value: string, callback?: Callback) => Promise<void>;\r\n  removeItem: (callback?: Callback) => Promise<void>;\r\n};\r\n\r\n/**\r\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\r\n * storage system that is global to the app.  It should be used instead of\r\n * LocalStorage.\r\n *\r\n * See https://react-native-async-storage.github.io/async-storage/docs/api\r\n */\r\nexport type AsyncStorageStatic = {\r\n  /**\r\n   * Fetches an item for a `key` and invokes a callback upon completion.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\r\n   */\r\n  getItem: (\r\n    key: string,\r\n    callback?: CallbackWithResult<string>\r\n  ) => Promise<string | null>;\r\n\r\n  /**\r\n   * Sets the value for a `key` and invokes a callback upon completion.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\r\n   */\r\n  setItem: (key: string, value: string, callback?: Callback) => Promise<void>;\r\n\r\n  /**\r\n   * Removes an item for a `key` and invokes a callback upon completion.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\r\n   */\r\n  removeItem: (key: string, callback?: Callback) => Promise<void>;\r\n\r\n  /**\r\n   * Merges an existing `key` value with an input value, assuming both values\r\n   * are stringified JSON.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\r\n   */\r\n  mergeItem: (key: string, value: string, callback?: Callback) => Promise<void>;\r\n\r\n  /**\r\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\r\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\r\n   * your app's keys.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\r\n   */\r\n  clear: (callback?: Callback) => Promise<void>;\r\n\r\n  /**\r\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\r\n   */\r\n  getAllKeys: (\r\n    callback?: CallbackWithResult<readonly string[]>\r\n  ) => Promise<readonly string[]>;\r\n\r\n  /**\r\n   * The following batched functions are useful for executing a lot of\r\n   * operations at once, allowing for native optimizations and provide the\r\n   * convenience of a single callback after all operations are complete.\r\n   *\r\n   * These functions return arrays of errors, potentially one for every key.\r\n   * For key-specific errors, the Error object will have a key property to\r\n   * indicate which key caused the error.\r\n   */\r\n\r\n  /**\r\n   * Flushes any pending requests using a single batch call to get the data.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\r\n   * */\r\n  flushGetRequests: () => void;\r\n\r\n  /**\r\n   * This allows you to batch the fetching of items given an array of `key`\r\n   * inputs. Your callback will be invoked with an array of corresponding\r\n   * key-value pairs found.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\r\n   */\r\n  multiGet: (\r\n    keys: readonly string[],\r\n    callback?: MultiGetCallback\r\n  ) => Promise<readonly KeyValuePair[]>;\r\n\r\n  /**\r\n   * Use this as a batch operation for storing multiple key-value pairs. When\r\n   * the operation completes you'll get a single callback with any errors.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\r\n   */\r\n  multiSet: (\r\n    keyValuePairs: [string, string][],\r\n    callback?: MultiCallback\r\n  ) => Promise<void>;\r\n\r\n  /**\r\n   * Call this to batch the deletion of all keys in the `keys` array.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\r\n   */\r\n  multiRemove: (\r\n    keys: readonly string[],\r\n    callback?: MultiCallback\r\n  ) => Promise<void>;\r\n\r\n  /**\r\n   * Batch operation to merge in existing and new values for a given set of\r\n   * keys. This assumes that the values are stringified JSON.\r\n   *\r\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\r\n   */\r\n  multiMerge: (\r\n    keyValuePairs: [string, string][],\r\n    callback?: MultiCallback\r\n  ) => Promise<void>;\r\n};\r\n"],"mappings":""}